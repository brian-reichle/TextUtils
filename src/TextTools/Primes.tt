// Copyright (c) Brian Reichle.  All Rights Reserved.  Licensed under the MIT License.  See License.txt in the project root for license information.
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
namespace TextTools
{
	static partial class Primes
	{
		const int MaxPrime = <#=CalculateMaxPrime()#>;

		static readonly int[] _primes =
		{
<#
foreach (var line in PrimeLines())
{
#>
			<#=line#>
<#
}
#>
		};
	}
}
<#+
static int CalculateMaxPrime()
{
	var value = int.MaxValue;

	while(!IsPrime(value))
	{
		value -= 2;
	}

	return value;
}

static IEnumerable<string> PrimeLines()
{
	var builder = new StringBuilder();

	foreach (var n in FindPrimes().OrderBy(x => x))
	{
		if (builder.Length > 0)
		{
			builder.Append(' ');
		}

		builder.Append(n).Append(',');

		if (builder.Length >= 70)
		{
			yield return builder.ToString();
			builder.Clear();
		}
	}

	if(builder.Length > 0)
	{
		yield return builder.ToString();
	}
}

static IEnumerable<int> FindPrimes()
{
	const int limit = 1_000_000;
	var queue = new Queue<int>();
	queue.Enqueue(3);
	queue.Enqueue(5);
	queue.Enqueue(101);
	var set = new HashSet<int>();

	while (queue.Count > 0)
	{
		var value = queue.Dequeue();

		if (set.Add(value))
		{
			value = value * 2 + 1;

			while (value < limit)
			{
				if (IsPrime(value))
				{
					queue.Enqueue(value);
					break;
				}

				value += 2;
			}
		}
	}

	return set;
}

static bool IsPrime(int value)
{
	var cap = (int)Math.Sqrt(value);

	for (var i = 2; i < cap; i++)
	{
		if (value % i == 0)
		{
			return false;
		}
	}

	return true;
}
#>
